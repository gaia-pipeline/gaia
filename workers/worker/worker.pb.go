// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package worker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WorkerInstance represents the identity of
// a worker instance.
type WorkerInstance struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	WorkerSlots          int32    `protobuf:"varint,2,opt,name=worker_slots,json=workerSlots,proto3" json:"worker_slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerInstance) Reset()         { *m = WorkerInstance{} }
func (m *WorkerInstance) String() string { return proto.CompactTextString(m) }
func (*WorkerInstance) ProtoMessage()    {}
func (*WorkerInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{0}
}

func (m *WorkerInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerInstance.Unmarshal(m, b)
}
func (m *WorkerInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerInstance.Marshal(b, m, deterministic)
}
func (m *WorkerInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerInstance.Merge(m, src)
}
func (m *WorkerInstance) XXX_Size() int {
	return xxx_messageInfo_WorkerInstance.Size(m)
}
func (m *WorkerInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerInstance.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerInstance proto.InternalMessageInfo

func (m *WorkerInstance) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *WorkerInstance) GetWorkerSlots() int32 {
	if m != nil {
		return m.WorkerSlots
	}
	return 0
}

// PipelineRun represents one pipeline run.
type PipelineRun struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Status               string   `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	StartDate            int64    `protobuf:"varint,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	FinishDate           int64    `protobuf:"varint,5,opt,name=finish_date,json=finishDate,proto3" json:"finish_date,omitempty"`
	ScheduleDate         int64    `protobuf:"varint,6,opt,name=schedule_date,json=scheduleDate,proto3" json:"schedule_date,omitempty"`
	PipelineId           int64    `protobuf:"varint,7,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	PipelineName         string   `protobuf:"bytes,8,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	PipelineType         string   `protobuf:"bytes,9,opt,name=pipeline_type,json=pipelineType,proto3" json:"pipeline_type,omitempty"`
	ShaSum               []byte   `protobuf:"bytes,10,opt,name=sha_sum,json=shaSum,proto3" json:"sha_sum,omitempty"`
	Jobs                 []*Job   `protobuf:"bytes,11,rep,name=jobs,proto3" json:"jobs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineRun) Reset()         { *m = PipelineRun{} }
func (m *PipelineRun) String() string { return proto.CompactTextString(m) }
func (*PipelineRun) ProtoMessage()    {}
func (*PipelineRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{1}
}

func (m *PipelineRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineRun.Unmarshal(m, b)
}
func (m *PipelineRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineRun.Marshal(b, m, deterministic)
}
func (m *PipelineRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineRun.Merge(m, src)
}
func (m *PipelineRun) XXX_Size() int {
	return xxx_messageInfo_PipelineRun.Size(m)
}
func (m *PipelineRun) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineRun.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineRun proto.InternalMessageInfo

func (m *PipelineRun) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *PipelineRun) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PipelineRun) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PipelineRun) GetStartDate() int64 {
	if m != nil {
		return m.StartDate
	}
	return 0
}

func (m *PipelineRun) GetFinishDate() int64 {
	if m != nil {
		return m.FinishDate
	}
	return 0
}

func (m *PipelineRun) GetScheduleDate() int64 {
	if m != nil {
		return m.ScheduleDate
	}
	return 0
}

func (m *PipelineRun) GetPipelineId() int64 {
	if m != nil {
		return m.PipelineId
	}
	return 0
}

func (m *PipelineRun) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

func (m *PipelineRun) GetPipelineType() string {
	if m != nil {
		return m.PipelineType
	}
	return ""
}

func (m *PipelineRun) GetShaSum() []byte {
	if m != nil {
		return m.ShaSum
	}
	return nil
}

func (m *PipelineRun) GetJobs() []*Job {
	if m != nil {
		return m.Jobs
	}
	return nil
}

// Job represents one job from a pipeline run.
type Job struct {
	UniqueId             uint32      `protobuf:"varint,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Title                string      `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description          string      `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	DependsOn            []*Job      `protobuf:"bytes,4,rep,name=depends_on,json=dependsOn,proto3" json:"depends_on,omitempty"`
	Status               string      `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	Args                 []*Argument `protobuf:"bytes,6,rep,name=args,proto3" json:"args,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Job) Reset()         { *m = Job{} }
func (m *Job) String() string { return proto.CompactTextString(m) }
func (*Job) ProtoMessage()    {}
func (*Job) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{2}
}

func (m *Job) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Job.Unmarshal(m, b)
}
func (m *Job) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Job.Marshal(b, m, deterministic)
}
func (m *Job) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Job.Merge(m, src)
}
func (m *Job) XXX_Size() int {
	return xxx_messageInfo_Job.Size(m)
}
func (m *Job) XXX_DiscardUnknown() {
	xxx_messageInfo_Job.DiscardUnknown(m)
}

var xxx_messageInfo_Job proto.InternalMessageInfo

func (m *Job) GetUniqueId() uint32 {
	if m != nil {
		return m.UniqueId
	}
	return 0
}

func (m *Job) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Job) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Job) GetDependsOn() []*Job {
	if m != nil {
		return m.DependsOn
	}
	return nil
}

func (m *Job) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Job) GetArgs() []*Argument {
	if m != nil {
		return m.Args
	}
	return nil
}

// Argument represents one argument from a job.
type Argument struct {
	Description          string   `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Type                 string   `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Key                  string   `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Argument) Reset()         { *m = Argument{} }
func (m *Argument) String() string { return proto.CompactTextString(m) }
func (*Argument) ProtoMessage()    {}
func (*Argument) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{3}
}

func (m *Argument) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Argument.Unmarshal(m, b)
}
func (m *Argument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Argument.Marshal(b, m, deterministic)
}
func (m *Argument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Argument.Merge(m, src)
}
func (m *Argument) XXX_Size() int {
	return xxx_messageInfo_Argument.Size(m)
}
func (m *Argument) XXX_DiscardUnknown() {
	xxx_messageInfo_Argument.DiscardUnknown(m)
}

var xxx_messageInfo_Argument proto.InternalMessageInfo

func (m *Argument) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *Argument) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Argument) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Argument) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// LogChunk represents one chunk of a log file.
type LogChunk struct {
	RunId                int64    `protobuf:"varint,1,opt,name=run_id,json=runId,proto3" json:"run_id,omitempty"`
	PipelineId           int64    `protobuf:"varint,2,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Chunk                []byte   `protobuf:"bytes,3,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogChunk) Reset()         { *m = LogChunk{} }
func (m *LogChunk) String() string { return proto.CompactTextString(m) }
func (*LogChunk) ProtoMessage()    {}
func (*LogChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{4}
}

func (m *LogChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogChunk.Unmarshal(m, b)
}
func (m *LogChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogChunk.Marshal(b, m, deterministic)
}
func (m *LogChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogChunk.Merge(m, src)
}
func (m *LogChunk) XXX_Size() int {
	return xxx_messageInfo_LogChunk.Size(m)
}
func (m *LogChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_LogChunk.DiscardUnknown(m)
}

var xxx_messageInfo_LogChunk proto.InternalMessageInfo

func (m *LogChunk) GetRunId() int64 {
	if m != nil {
		return m.RunId
	}
	return 0
}

func (m *LogChunk) GetPipelineId() int64 {
	if m != nil {
		return m.PipelineId
	}
	return 0
}

func (m *LogChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

// FileChunk represents one chunk of a file.
type FileChunk struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileChunk) Reset()         { *m = FileChunk{} }
func (m *FileChunk) String() string { return proto.CompactTextString(m) }
func (*FileChunk) ProtoMessage()    {}
func (*FileChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{5}
}

func (m *FileChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileChunk.Unmarshal(m, b)
}
func (m *FileChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileChunk.Marshal(b, m, deterministic)
}
func (m *FileChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileChunk.Merge(m, src)
}
func (m *FileChunk) XXX_Size() int {
	return xxx_messageInfo_FileChunk.Size(m)
}
func (m *FileChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_FileChunk.DiscardUnknown(m)
}

var xxx_messageInfo_FileChunk proto.InternalMessageInfo

func (m *FileChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkerInstance)(nil), "worker.WorkerInstance")
	proto.RegisterType((*PipelineRun)(nil), "worker.PipelineRun")
	proto.RegisterType((*Job)(nil), "worker.Job")
	proto.RegisterType((*Argument)(nil), "worker.Argument")
	proto.RegisterType((*LogChunk)(nil), "worker.LogChunk")
	proto.RegisterType((*FileChunk)(nil), "worker.FileChunk")
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor_e4ff6184b07e587a) }

var fileDescriptor_e4ff6184b07e587a = []byte{
	// 607 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x95, 0xf3, 0xe3, 0xc6, 0xd7, 0x69, 0xd5, 0x6f, 0xbe, 0x52, 0xac, 0x56, 0xa8, 0x69, 0x60,
	0x11, 0xb1, 0x48, 0xab, 0x22, 0xa1, 0x22, 0xb1, 0x01, 0x0a, 0x28, 0x55, 0x05, 0x95, 0x0b, 0x82,
	0x5d, 0xe4, 0xc4, 0xb7, 0xce, 0x10, 0x7b, 0xc6, 0xcc, 0x0f, 0x28, 0xef, 0xc7, 0x63, 0xb0, 0xe7,
	0x35, 0x90, 0x67, 0x32, 0x51, 0xd2, 0xb4, 0x95, 0xd8, 0xf9, 0x9e, 0x7b, 0xee, 0xcf, 0x9c, 0xe3,
	0x0b, 0xed, 0x9f, 0x5c, 0x4c, 0x51, 0xf4, 0x4b, 0xc1, 0x15, 0x27, 0xbe, 0x8d, 0xf6, 0xf6, 0x33,
	0xce, 0xb3, 0x1c, 0x8f, 0x0c, 0x3a, 0xd2, 0xd7, 0x47, 0x58, 0x94, 0x6a, 0x66, 0x49, 0xdd, 0x4b,
	0xd8, 0xfa, 0x62, 0x68, 0x03, 0x26, 0x55, 0xc2, 0xc6, 0x48, 0xf6, 0x21, 0xd0, 0x8c, 0x7e, 0xd7,
	0x38, 0xa4, 0x69, 0xe4, 0x75, 0xbc, 0x5e, 0x10, 0xb7, 0x2c, 0x30, 0x48, 0xc9, 0xa1, 0x9b, 0x31,
	0x94, 0x39, 0x57, 0x32, 0xaa, 0x75, 0xbc, 0x5e, 0x33, 0x0e, 0x2d, 0x76, 0x55, 0x41, 0xdd, 0xdf,
	0x35, 0x08, 0x2f, 0x69, 0x89, 0x39, 0x65, 0x18, 0x6b, 0x76, 0x7f, 0xbf, 0x2d, 0xa8, 0xd1, 0xd4,
	0x74, 0xa9, 0xc7, 0x35, 0x9a, 0x92, 0x5d, 0xf0, 0xa5, 0x4a, 0x94, 0x96, 0x51, 0xdd, 0x30, 0xe7,
	0x11, 0x79, 0x04, 0x20, 0x55, 0x22, 0xd4, 0x30, 0x4d, 0x14, 0x46, 0x0d, 0xc3, 0x0f, 0x0c, 0x72,
	0x96, 0x28, 0x24, 0x07, 0x10, 0x5e, 0x53, 0x46, 0xe5, 0xc4, 0xe6, 0x9b, 0x26, 0x0f, 0x16, 0x32,
	0x84, 0xc7, 0xb0, 0x29, 0xc7, 0x13, 0x4c, 0x75, 0x8e, 0x96, 0xe2, 0x1b, 0x4a, 0xdb, 0x81, 0xae,
	0x4b, 0x39, 0x5f, 0xbc, 0xda, 0x75, 0xc3, 0x76, 0x71, 0xd0, 0x20, 0xad, 0xba, 0x2c, 0x08, 0x2c,
	0x29, 0x30, 0x6a, 0x99, 0x25, 0xdb, 0x0e, 0xfc, 0x90, 0x14, 0xb8, 0x42, 0x52, 0xb3, 0x12, 0xa3,
	0x60, 0x95, 0xf4, 0x69, 0x56, 0x22, 0x79, 0x08, 0x1b, 0x72, 0x92, 0x0c, 0xa5, 0x2e, 0x22, 0xe8,
	0x78, 0xbd, 0x76, 0xec, 0xcb, 0x49, 0x72, 0xa5, 0x0b, 0x72, 0x00, 0x8d, 0x6f, 0x7c, 0x24, 0xa3,
	0xb0, 0x53, 0xef, 0x85, 0x27, 0x61, 0x7f, 0xee, 0xe8, 0x39, 0x1f, 0xc5, 0x26, 0xd1, 0xfd, 0xe5,
	0x41, 0xfd, 0x9c, 0x8f, 0xd6, 0x65, 0xdd, 0x5c, 0x92, 0x75, 0x07, 0x9a, 0x8a, 0xaa, 0x1c, 0x8d,
	0xb2, 0x41, 0x6c, 0x03, 0xd2, 0x81, 0x30, 0x45, 0x39, 0x16, 0xb4, 0x54, 0x94, 0xb3, 0xb9, 0xc2,
	0xcb, 0x10, 0x79, 0x0a, 0x90, 0x62, 0x89, 0x2c, 0x95, 0x43, 0xce, 0xa2, 0xc6, 0xfa, 0x0e, 0xc1,
	0x3c, 0xfd, 0x91, 0x2d, 0x59, 0xd5, 0x5c, 0xb1, 0xea, 0x09, 0x34, 0x12, 0x91, 0xc9, 0xc8, 0x37,
	0xd5, 0xdb, 0xae, 0xfa, 0x95, 0xc8, 0x74, 0x81, 0x4c, 0xc5, 0x26, 0xdb, 0x9d, 0x40, 0xcb, 0x21,
	0x37, 0xf7, 0xf2, 0xd6, 0xf7, 0x22, 0xd0, 0x30, 0x52, 0xda, 0xe7, 0x98, 0x6f, 0xb2, 0x0d, 0xf5,
	0x29, 0xce, 0xe6, 0xaf, 0xa8, 0x3e, 0xab, 0x57, 0xff, 0x48, 0x72, 0x6d, 0xff, 0x8f, 0x20, 0xb6,
	0x41, 0xf7, 0x2b, 0xb4, 0x2e, 0x78, 0xf6, 0x66, 0xa2, 0xd9, 0x94, 0x3c, 0x00, 0x5f, 0x68, 0xe6,
	0x14, 0xab, 0xc7, 0x4d, 0xa1, 0xd9, 0x20, 0xbd, 0x69, 0x7c, 0x6d, 0xcd, 0xf8, 0x1d, 0x68, 0x8e,
	0xab, 0x06, 0x66, 0x5a, 0x3b, 0xb6, 0x41, 0xf7, 0x10, 0x82, 0x77, 0x34, 0x47, 0xdb, 0x7a, 0x41,
	0xf1, 0x96, 0x28, 0x27, 0x7f, 0x6a, 0xe0, 0xdb, 0xfb, 0x22, 0xcf, 0xa1, 0x71, 0x49, 0x59, 0x46,
	0x76, 0x9d, 0x22, 0xab, 0x77, 0xb7, 0xb7, 0xdb, 0xb7, 0x77, 0xda, 0x77, 0x77, 0xda, 0x7f, 0x5b,
	0xdd, 0x29, 0x39, 0x85, 0x8d, 0xf7, 0xa8, 0x2a, 0xf2, 0x9d, 0xa5, 0xff, 0x3b, 0x7c, 0xe9, 0xee,
	0x8e, 0x3d, 0xf2, 0x02, 0xe0, 0x73, 0x59, 0xfd, 0xed, 0xa6, 0xf8, 0x36, 0xd2, 0x3d, 0x43, 0xdb,
	0x57, 0x4a, 0x60, 0x52, 0xbc, 0xa6, 0x2c, 0x11, 0xb3, 0xdb, 0x8b, 0xff, 0x73, 0xe0, 0x42, 0x85,
	0x63, 0x8f, 0x9c, 0x02, 0xd8, 0xca, 0x0b, 0x9e, 0x49, 0xb2, 0xb0, 0xdf, 0x59, 0x70, 0xd7, 0xc4,
	0x9e, 0x47, 0x5e, 0x02, 0x9c, 0xa1, 0xc0, 0x8c, 0x4a, 0x85, 0xe2, 0x5f, 0x65, 0x1a, 0xf9, 0x26,
	0x7e, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x08, 0xfc, 0x7d, 0xc2, 0x04, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	// Ping is used to send a ping response.
	Ping(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetWork pulls work from the primary instance.
	GetWork(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (Worker_GetWorkClient, error)
	// UpdateWork updates work information at the primary instance.
	UpdateWork(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (*empty.Empty, error)
	// StreamBinary streams a pipeline binary back to a worker instance.
	StreamBinary(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (Worker_StreamBinaryClient, error)
	// StreamLogs streams pipeline run logs to the primary instance.
	StreamLogs(ctx context.Context, opts ...grpc.CallOption) (Worker_StreamLogsClient, error)
	// Deregister deregister a registered worker from the primary instance.
	Deregister(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Ping(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.Worker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetWork(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (Worker_GetWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/worker.Worker/GetWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerGetWorkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_GetWorkClient interface {
	Recv() (*PipelineRun, error)
	grpc.ClientStream
}

type workerGetWorkClient struct {
	grpc.ClientStream
}

func (x *workerGetWorkClient) Recv() (*PipelineRun, error) {
	m := new(PipelineRun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) UpdateWork(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.Worker/UpdateWork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) StreamBinary(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (Worker_StreamBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[1], "/worker.Worker/StreamBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamBinaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StreamBinaryClient interface {
	Recv() (*FileChunk, error)
	grpc.ClientStream
}

type workerStreamBinaryClient struct {
	grpc.ClientStream
}

func (x *workerStreamBinaryClient) Recv() (*FileChunk, error) {
	m := new(FileChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StreamLogs(ctx context.Context, opts ...grpc.CallOption) (Worker_StreamLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[2], "/worker.Worker/StreamLogs", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamLogsClient{stream}
	return x, nil
}

type Worker_StreamLogsClient interface {
	Send(*LogChunk) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type workerStreamLogsClient struct {
	grpc.ClientStream
}

func (x *workerStreamLogsClient) Send(m *LogChunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *workerStreamLogsClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) Deregister(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.Worker/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	// Ping is used to send a ping response.
	Ping(context.Context, *WorkerInstance) (*empty.Empty, error)
	// GetWork pulls work from the primary instance.
	GetWork(*WorkerInstance, Worker_GetWorkServer) error
	// UpdateWork updates work information at the primary instance.
	UpdateWork(context.Context, *PipelineRun) (*empty.Empty, error)
	// StreamBinary streams a pipeline binary back to a worker instance.
	StreamBinary(*PipelineRun, Worker_StreamBinaryServer) error
	// StreamLogs streams pipeline run logs to the primary instance.
	StreamLogs(Worker_StreamLogsServer) error
	// Deregister deregister a registered worker from the primary instance.
	Deregister(context.Context, *WorkerInstance) (*empty.Empty, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Ping(ctx, req.(*WorkerInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerInstance)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).GetWork(m, &workerGetWorkServer{stream})
}

type Worker_GetWorkServer interface {
	Send(*PipelineRun) error
	grpc.ServerStream
}

type workerGetWorkServer struct {
	grpc.ServerStream
}

func (x *workerGetWorkServer) Send(m *PipelineRun) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_UpdateWork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PipelineRun)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).UpdateWork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/UpdateWork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).UpdateWork(ctx, req.(*PipelineRun))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_StreamBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineRun)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamBinary(m, &workerStreamBinaryServer{stream})
}

type Worker_StreamBinaryServer interface {
	Send(*FileChunk) error
	grpc.ServerStream
}

type workerStreamBinaryServer struct {
	grpc.ServerStream
}

func (x *workerStreamBinaryServer) Send(m *FileChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StreamLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(WorkerServer).StreamLogs(&workerStreamLogsServer{stream})
}

type Worker_StreamLogsServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*LogChunk, error)
	grpc.ServerStream
}

type workerStreamLogsServer struct {
	grpc.ServerStream
}

func (x *workerStreamLogsServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *workerStreamLogsServer) Recv() (*LogChunk, error) {
	m := new(LogChunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Worker_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Deregister(ctx, req.(*WorkerInstance))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Worker_Ping_Handler,
		},
		{
			MethodName: "UpdateWork",
			Handler:    _Worker_UpdateWork_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Worker_Deregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWork",
			Handler:       _Worker_GetWork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBinary",
			Handler:       _Worker_StreamBinary_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamLogs",
			Handler:       _Worker_StreamLogs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "worker.proto",
}
