// Code generated by protoc-gen-go. DO NOT EDIT.
// source: worker.proto

package worker

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// WorkerInstance represents the identity of
// a worker instance.
type WorkerInstance struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	WorkerSlots          int32    `protobuf:"varint,2,opt,name=worker_slots,json=workerSlots,proto3" json:"worker_slots,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *WorkerInstance) Reset()         { *m = WorkerInstance{} }
func (m *WorkerInstance) String() string { return proto.CompactTextString(m) }
func (*WorkerInstance) ProtoMessage()    {}
func (*WorkerInstance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{0}
}

func (m *WorkerInstance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WorkerInstance.Unmarshal(m, b)
}
func (m *WorkerInstance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WorkerInstance.Marshal(b, m, deterministic)
}
func (m *WorkerInstance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WorkerInstance.Merge(m, src)
}
func (m *WorkerInstance) XXX_Size() int {
	return xxx_messageInfo_WorkerInstance.Size(m)
}
func (m *WorkerInstance) XXX_DiscardUnknown() {
	xxx_messageInfo_WorkerInstance.DiscardUnknown(m)
}

var xxx_messageInfo_WorkerInstance proto.InternalMessageInfo

func (m *WorkerInstance) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *WorkerInstance) GetWorkerSlots() int32 {
	if m != nil {
		return m.WorkerSlots
	}
	return 0
}

// PipelineRun represents one pipeline run.
type PipelineRun struct {
	UniqueId             string   `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	PipelineId           int64    `protobuf:"varint,3,opt,name=pipeline_id,json=pipelineId,proto3" json:"pipeline_id,omitempty"`
	Status               string   `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
	PipelineName         string   `protobuf:"bytes,5,opt,name=pipeline_name,json=pipelineName,proto3" json:"pipeline_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PipelineRun) Reset()         { *m = PipelineRun{} }
func (m *PipelineRun) String() string { return proto.CompactTextString(m) }
func (*PipelineRun) ProtoMessage()    {}
func (*PipelineRun) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{1}
}

func (m *PipelineRun) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PipelineRun.Unmarshal(m, b)
}
func (m *PipelineRun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PipelineRun.Marshal(b, m, deterministic)
}
func (m *PipelineRun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PipelineRun.Merge(m, src)
}
func (m *PipelineRun) XXX_Size() int {
	return xxx_messageInfo_PipelineRun.Size(m)
}
func (m *PipelineRun) XXX_DiscardUnknown() {
	xxx_messageInfo_PipelineRun.DiscardUnknown(m)
}

var xxx_messageInfo_PipelineRun proto.InternalMessageInfo

func (m *PipelineRun) GetUniqueId() string {
	if m != nil {
		return m.UniqueId
	}
	return ""
}

func (m *PipelineRun) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *PipelineRun) GetPipelineId() int64 {
	if m != nil {
		return m.PipelineId
	}
	return 0
}

func (m *PipelineRun) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *PipelineRun) GetPipelineName() string {
	if m != nil {
		return m.PipelineName
	}
	return ""
}

// BinaryChunk represents one chunk of a binary.
type BinaryChunk struct {
	Chunk                []byte   `protobuf:"bytes,1,opt,name=chunk,proto3" json:"chunk,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BinaryChunk) Reset()         { *m = BinaryChunk{} }
func (m *BinaryChunk) String() string { return proto.CompactTextString(m) }
func (*BinaryChunk) ProtoMessage()    {}
func (*BinaryChunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_e4ff6184b07e587a, []int{2}
}

func (m *BinaryChunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BinaryChunk.Unmarshal(m, b)
}
func (m *BinaryChunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BinaryChunk.Marshal(b, m, deterministic)
}
func (m *BinaryChunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BinaryChunk.Merge(m, src)
}
func (m *BinaryChunk) XXX_Size() int {
	return xxx_messageInfo_BinaryChunk.Size(m)
}
func (m *BinaryChunk) XXX_DiscardUnknown() {
	xxx_messageInfo_BinaryChunk.DiscardUnknown(m)
}

var xxx_messageInfo_BinaryChunk proto.InternalMessageInfo

func (m *BinaryChunk) GetChunk() []byte {
	if m != nil {
		return m.Chunk
	}
	return nil
}

func init() {
	proto.RegisterType((*WorkerInstance)(nil), "worker.WorkerInstance")
	proto.RegisterType((*PipelineRun)(nil), "worker.PipelineRun")
	proto.RegisterType((*BinaryChunk)(nil), "worker.BinaryChunk")
}

func init() { proto.RegisterFile("worker.proto", fileDescriptor_e4ff6184b07e587a) }

var fileDescriptor_e4ff6184b07e587a = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x90, 0x4f, 0x4b, 0xc3, 0x40,
	0x10, 0xc5, 0xd9, 0xfe, 0x89, 0x76, 0x12, 0x7b, 0x18, 0xa5, 0x84, 0xf6, 0x60, 0x6d, 0x2f, 0x3d,
	0xa5, 0x45, 0x41, 0x44, 0x3c, 0xf9, 0x07, 0xe9, 0x45, 0x4a, 0x7a, 0xf0, 0x58, 0xd2, 0x66, 0x8c,
	0x4b, 0x9b, 0x4d, 0xdc, 0x6c, 0x90, 0x7e, 0x13, 0x3f, 0xa8, 0x1f, 0x40, 0xb2, 0x9b, 0x68, 0x05,
	0x15, 0xbc, 0xe5, 0xbd, 0x79, 0x6f, 0x32, 0xfb, 0x03, 0xe7, 0x35, 0x91, 0x6b, 0x92, 0x5e, 0x2a,
	0x13, 0x95, 0xa0, 0x65, 0x54, 0xb7, 0x17, 0x25, 0x49, 0xb4, 0xa1, 0xb1, 0x76, 0x97, 0xf9, 0xd3,
	0x98, 0xe2, 0x54, 0x6d, 0x4d, 0x68, 0x30, 0x83, 0xf6, 0xa3, 0x8e, 0x4d, 0x45, 0xa6, 0x02, 0xb1,
	0x22, 0xec, 0x41, 0x2b, 0x17, 0xfc, 0x25, 0xa7, 0x05, 0x0f, 0x5d, 0xd6, 0x67, 0xa3, 0x96, 0xbf,
	0x6f, 0x8c, 0x69, 0x88, 0x27, 0xd5, 0x3f, 0x16, 0xd9, 0x26, 0x51, 0x99, 0x5b, 0xeb, 0xb3, 0x51,
	0xd3, 0xb7, 0x8d, 0x37, 0x2f, 0xac, 0xc1, 0x1b, 0x03, 0x7b, 0xc6, 0x53, 0xda, 0x70, 0x41, 0x7e,
	0x2e, 0xfe, 0xde, 0xd7, 0x86, 0x1a, 0x0f, 0xf5, 0x96, 0xba, 0x5f, 0xe3, 0x21, 0x1e, 0x83, 0x9d,
	0x96, 0xdd, 0x22, 0x5e, 0xd7, 0x03, 0xa8, 0xac, 0x69, 0x88, 0x1d, 0xb0, 0x32, 0x15, 0xa8, 0x3c,
	0x73, 0x1b, 0x7a, 0x55, 0xa9, 0x70, 0x08, 0x07, 0x9f, 0x45, 0x11, 0xc4, 0xe4, 0x36, 0xf5, 0xd8,
	0xa9, 0xcc, 0x87, 0x20, 0xa6, 0xc1, 0x10, 0xec, 0x6b, 0x2e, 0x02, 0xb9, 0xbd, 0x79, 0xce, 0xc5,
	0x1a, 0x8f, 0xa0, 0xb9, 0x2a, 0x3e, 0xf4, 0x55, 0x8e, 0x6f, 0xc4, 0xe9, 0x3b, 0x03, 0xcb, 0x20,
	0xc1, 0x73, 0x68, 0xcc, 0xb8, 0x88, 0xb0, 0xe3, 0x95, 0x60, 0xbf, 0xa3, 0xea, 0x76, 0x3c, 0x83,
	0xd6, 0xab, 0xd0, 0x7a, 0x77, 0x05, 0x5a, 0xbc, 0x80, 0xbd, 0x7b, 0x52, 0x45, 0xf8, 0xd7, 0xea,
	0x61, 0xe5, 0xef, 0xa0, 0x9a, 0x30, 0xbc, 0x04, 0x67, 0xae, 0x24, 0x05, 0xb1, 0xb9, 0x13, 0x7f,
	0x8a, 0x7d, 0x75, 0x77, 0x1e, 0x33, 0x61, 0x78, 0x05, 0x70, 0x4b, 0x92, 0x22, 0x9e, 0x29, 0x92,
	0xff, 0xbd, 0x79, 0x69, 0x69, 0x7d, 0xf6, 0x11, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xde, 0xb8, 0x90,
	0x44, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	// Ping is used to send a ping response.
	Ping(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error)
	// GetWork pulls work from the primary instance.
	GetWork(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (Worker_GetWorkClient, error)
	// StreamBinary streams a pipeline binary back to a worker instance.
	StreamBinary(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (Worker_StreamBinaryClient, error)
	// Deregister deregister a registered worker from the primary instance.
	Deregister(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) Ping(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.Worker/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) GetWork(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (Worker_GetWorkClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[0], "/worker.Worker/GetWork", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerGetWorkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_GetWorkClient interface {
	Recv() (*PipelineRun, error)
	grpc.ClientStream
}

type workerGetWorkClient struct {
	grpc.ClientStream
}

func (x *workerGetWorkClient) Recv() (*PipelineRun, error) {
	m := new(PipelineRun)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) StreamBinary(ctx context.Context, in *PipelineRun, opts ...grpc.CallOption) (Worker_StreamBinaryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Worker_serviceDesc.Streams[1], "/worker.Worker/StreamBinary", opts...)
	if err != nil {
		return nil, err
	}
	x := &workerStreamBinaryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Worker_StreamBinaryClient interface {
	Recv() (*BinaryChunk, error)
	grpc.ClientStream
}

type workerStreamBinaryClient struct {
	grpc.ClientStream
}

func (x *workerStreamBinaryClient) Recv() (*BinaryChunk, error) {
	m := new(BinaryChunk)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *workerClient) Deregister(ctx context.Context, in *WorkerInstance, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/worker.Worker/Deregister", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	// Ping is used to send a ping response.
	Ping(context.Context, *WorkerInstance) (*empty.Empty, error)
	// GetWork pulls work from the primary instance.
	GetWork(*WorkerInstance, Worker_GetWorkServer) error
	// StreamBinary streams a pipeline binary back to a worker instance.
	StreamBinary(*PipelineRun, Worker_StreamBinaryServer) error
	// Deregister deregister a registered worker from the primary instance.
	Deregister(context.Context, *WorkerInstance) (*empty.Empty, error)
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Ping(ctx, req.(*WorkerInstance))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_GetWork_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WorkerInstance)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).GetWork(m, &workerGetWorkServer{stream})
}

type Worker_GetWorkServer interface {
	Send(*PipelineRun) error
	grpc.ServerStream
}

type workerGetWorkServer struct {
	grpc.ServerStream
}

func (x *workerGetWorkServer) Send(m *PipelineRun) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_StreamBinary_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PipelineRun)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WorkerServer).StreamBinary(m, &workerStreamBinaryServer{stream})
}

type Worker_StreamBinaryServer interface {
	Send(*BinaryChunk) error
	grpc.ServerStream
}

type workerStreamBinaryServer struct {
	grpc.ServerStream
}

func (x *workerStreamBinaryServer) Send(m *BinaryChunk) error {
	return x.ServerStream.SendMsg(m)
}

func _Worker_Deregister_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WorkerInstance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Deregister(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/worker.Worker/Deregister",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Deregister(ctx, req.(*WorkerInstance))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "worker.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Worker_Ping_Handler,
		},
		{
			MethodName: "Deregister",
			Handler:    _Worker_Deregister_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetWork",
			Handler:       _Worker_GetWork_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamBinary",
			Handler:       _Worker_StreamBinary_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "worker.proto",
}
